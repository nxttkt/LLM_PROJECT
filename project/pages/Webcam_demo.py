import os
import io
import requests
from dotenv import load_dotenv
import streamlit as st

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env
load_dotenv()

st.set_page_config(page_title="Food Guess (LogMeal)", page_icon="üçΩÔ∏è")

st.title("üçΩÔ∏è ‡πÄ‡∏î‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û (LogMeal)")
st.caption("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û ‚Üí ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á LogMeal API ‚Üí ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π + ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à")

# ----- ‡πÉ‡∏™‡πà API Key -----
LM_TOKEN = os.getenv("LOGMEAL_TOKEN")

if not LM_TOKEN:
    st.warning("‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LOGMEAL_TOKEN ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env")

# ----- ‡∏Å‡∏•‡πâ‡∏≠‡∏á -----
st.subheader("‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ")
enable = st.checkbox("Enable camera")
picture = st.camera_input("Take a picture", disabled=not enable)

# ----- ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î -----
st.subheader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
uploaded = st.file_uploader("‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö .jpg .jpeg .png", type=["jpg", "jpeg", "png"])

# ----- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏†‡∏≤‡∏û (‡πÉ‡∏´‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô) -----
img_file = picture or uploaded
if img_file:
    st.image(img_file, caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", use_container_width=True)


st.markdown("---")
top_k = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏´‡πá‡∏ô (top_k)", 1, 5, 3)
go = st.button("üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ LogMeal")

# ====== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å LogMeal ======
def logmeal_classify(image_bytes: bytes, token: str, top_k: int = 3):
    """
    ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å LogMeal dish classification (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á endpoint ‡∏£‡∏∏‡πà‡∏ô v2)
    ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ path ‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô ‚Äî ‡πÄ‡∏ä‡πá‡∏Å‡πÉ‡∏ô docs ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ
    """
    url = f"https://api.logmeal.com/v2/recognition/dish/classify?top_k={top_k}"
    headers = {"Authorization": f"Bearer {token}"}
    files = {"image": ("image.jpg", image_bytes, "image/jpeg")}
    # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö multipart/form-data ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà LogMeal ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    # (‡∏î‡∏π‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠/‡∏ó‡∏¥‡∏ß‡πÇ‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡∏Ç‡∏≠‡∏á LogMeal)  
    resp = requests.post(url, headers=headers, files=files, timeout=30)
    resp.raise_for_status()
    return resp.json()

if go:
    if not img_file:
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞")
    elif not LM_TOKEN:
        st.error("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ LogMeal API Token (Bearer) ‚Äî ‡πÉ‡∏™‡πà‡πÉ‡∏ô .env ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ENV `LOGMEAL_TOKEN`")
    else:
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á LogMeal ..."):
            try:
                # ‡∏î‡∏∂‡∏á bytes ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á camera_input ‡πÅ‡∏•‡∏∞ file_uploader)
                img_bytes = img_file.getvalue() if hasattr(img_file, "getvalue") else img_file.read()
                data = logmeal_classify(img_bytes, LM_TOKEN, top_k=top_k)

                st.subheader("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å LogMeal")
                # ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏≤‡∏à‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏ï‡∏≤‡∏° tier/‡∏£‡∏∏‡πà‡∏ô API
                # ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏à‡∏∞‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ "predictions" ‡∏´‡∏£‡∏∑‡∏≠ "recognition_results"
                # ‡πÉ‡∏™‡πà fallback ‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô
                preds = (
                    data.get("recognition_results")
                    or data.get("predictions")
                    or data.get("dishes")
                    or []
                )

                if not preds:
                    st.info(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÑ‡∏î‡πâ\n\nraw: `{data}`")
                else:
                    for i, p in enumerate(preds, 1):
                        # ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢: name/label + probability/prob/score + (id)
                        name = p.get("name") or p.get("label") or p.get("dish") or "Unknown"
                        prob = p.get("probability") or p.get("prob") or p.get("score")
                        dish_id = p.get("id") or p.get("class_id")
                        col1, col2, col3 = st.columns([3,2,2])
                        with col1:
                            st.markdown(f"**#{i}. {name}**")
                        with col2:
                            if prob is not None:
                                st.write(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {float(prob):.2f}")
                            else:
                                st.write("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: -")
                        with col3:
                            st.write(f"Dish ID: {dish_id or '-'}")

                with st.expander("‡∏î‡∏π raw JSON"):
                    st.code(data, language="json")

            except requests.HTTPError as e:
                st.error(f"HTTP {e.response.status_code}: {e.response.text}")
            except Exception as e:
                st.exception(e)
